{"version":3,"sources":["Loading.js","App.js","serviceWorker.js","index.js"],"names":["GitHubRepoCard","props","className","App","state","threads","loading","fetch","response","json","threadsJson","console","log","data","children","length","subreddit_subscribers","subscribers","this","setState","map","thread","href","url","target","title","author","ups","toLocaleString","num_comments","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAEe,SAASA,EAAeC,GAErC,OACE,yBAAKC,UAAU,W,ICgCJC,E,YAhCb,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTC,QAAS,GACTC,SAAQ,GAJC,E,qNAUUC,MAAM,gD,cAArBC,E,gBACkBA,EAASC,O,OAA3BC,E,OACJC,QAAQC,IAAIF,EAAYG,KAAKC,SAASC,QAClCV,EAAQK,EAAYG,KAAKC,SAC7BH,QAAQC,IAAIP,GACZM,QAAQC,IAAIP,EAAQ,GAAGQ,KAAKG,uBACxBC,EAAYZ,EAAQ,GAAGQ,KAAKG,sBAChCL,QAAQC,IAAIK,GACZC,KAAKC,SAAS,CAACd,UAASC,SAAQ,EAAOW,gB,oIAGzC,OACE,iCAAM,2BAAIC,KAAKd,MAAMa,aACrB,iCAAOC,KAAKd,MAAME,QAAU,kBAAC,EAAD,MAAcY,KAAKd,MAAMC,QAAQe,IAAI,SAACC,GAChE,OAAO,iCAAM,uBAAGC,KAAMD,EAAOR,KAAKU,IAAKC,OAAO,UAAjC,IAA4CH,EAAOR,KAAKY,OAA9D,IAAyE,2BAAIJ,EAAOR,KAAKa,QAAW,2BAAIL,EAAOR,KAAKc,IAAIC,iBAApB,KAA0C,2BAAIP,EAAOR,KAAKgB,aAAeR,EAAOR,KAAKgB,aAAaD,iBAAiB,wB,GAzBpNE,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.a2443e8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css'\r\nexport default function GitHubRepoCard(props) {\r\n\r\n  return (\r\n    <div className=\"loader\">\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport './App.css';\nimport Loading from './Loading';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      threads: [],\n      loading:true\n    };\n  }\n  async componentDidMount(){\n      \n\n      let response=await fetch('https://www.reddit.com/r/publicfreakout.json');\n      let threadsJson=await response.json();\n      console.log(threadsJson.data.children.length);\n      let threads=threadsJson.data.children;\n      console.log(threads);\n      console.log(threads[1].data.subreddit_subscribers);\n      let subscribers=threads[1].data.subreddit_subscribers;\n      console.log(subscribers)\n      this.setState({threads, loading:false, subscribers});\n    }\n  render(){\n    return (\n      <div> <p>{this.state.subscribers}</p> \n      <div> {this.state.loading ? <Loading /> : this.state.threads.map((thread)=>{\n        return <div> <a href={thread.data.url} target=\"_blank\"> {thread.data.title}</a> <p>{thread.data.author}</p><p>{thread.data.ups.toLocaleString()} </p><p>{thread.data.num_comments ? thread.data.num_comments.toLocaleString():'No comments'}</p></div>\n      })}</div>\n      \n      </div>\n      );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}