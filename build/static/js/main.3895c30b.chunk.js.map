{"version":3,"sources":["Loading.js","ThreadCard.js","ThreadList.js","SearchForm.js","RedditApi.js","History.js","App.js","serviceWorker.js","index.js"],"names":["GitHubRepoCard","props","className","ThreadCard","thread","href","data","url","target","onClick","e","increaseReads","console","log","reads","document","getElementById","innerHTML","title","author","ups","toLocaleString","num_comments","ThreadList","threads","map","SearchForm","handleSearchInputChange","event","setState","searchValue","value","handleSearch","preventDefault","onSearch","state","onSubmit","this","type","onChange","React","Component","getThreads","topic","a","fetch","response","json","threadsJson","children","History","previousSearches","term","applyPreviousSearch","bind","App","loading","Promise","all","previousSearch","concat","id","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3895c30b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css'\r\nexport default function GitHubRepoCard(props) {\r\n\r\n  return (\r\n    <div className=\"loader\">\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nexport default function ThreadCard(props){\r\n   let thread=props.thread;\r\n\r\n   return(\r\n      <div>\r\n        <a href={thread.data.url} target=\"_blank\" onClick={(e) => { props.increaseReads(); console.log(props.reads); document.getElementById('reads').innerHTML=props.reads+1;}}>{thread.data.title}</a>\r\n        <p>{thread.data.author}</p>\r\n        <p>{thread.data.ups.toLocaleString()}</p>\r\n        <p>{thread.data.num_comments ? thread.data.num_comments.toLocaleString():'No comments'}</p>\r\n      </div>\r\n   \t);\r\n}","import React from 'react';\r\nimport ThreadCard from './ThreadCard'\r\n\r\nexport default function ThreadList(props){\r\n\tconsole.log(props.reads)\r\n\tlet reads=props.reads\r\n\r\n\treturn(\r\n       <div>\r\n          {props.threads.map((thread)=>{\r\n          \treturn <ThreadCard thread={thread} increaseReads={props.increaseReads} reads={props.reads}/>\r\n          })}\r\n       </div>\r\n\t\t);\r\n}","import React from 'react';\r\n\r\nexport default class SearchForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchValue: ''\r\n    };\r\n  }\r\n  handleSearchInputChange = (event) => {\r\n    this.setState({\r\n      searchValue: event.target.value\r\n    });\r\n  }\r\n  handleSearch = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSearch(this.state.searchValue);\r\n  }\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSearch}>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.searchValue}\r\n          onChange={this.handleSearchInputChange} />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n    );\r\n  }\r\n}","export async function getThreads(topic){\r\n\tconsole.log('https://www.reddit.com/r/'+topic+'.json')\r\n\tlet response=await fetch('https://www.reddit.com/r/'+topic+'.json');\r\n\tlet threadsJson=await response.json();\r\n\tlet threads=threadsJson.data.children;\r\n\treturn threads;\r\n}","import React from 'react'\r\n\r\nexport default function History(props) {\r\n    return props.previousSearches.map((term) => {\r\n    \tconsole.log(term)\r\n        return (\r\n        \t<div>\r\n            <button type=\"button\" onClick={props.applyPreviousSearch.bind(this, term)}>\r\n              {term}\r\n            </button>\r\n            </div>\r\n        );\r\n    })\r\n}","import React from 'react';\nimport './App.css';\nimport Loading from './Loading';\nimport ThreadCard from './ThreadCard'\nimport ThreadList from './ThreadList'\nimport SearchForm from './SearchForm';\nimport { getThreads } from './RedditApi';\nimport History from './History';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      threads: [],\n      loading:false,\n      previousSearch: [],\n      reads: 0\n    };\n\n  }\n  handleSearch = async (searchValue) => {\n    this.setState({ loading: true });\n\n    let [threads] = await Promise.all([\n      getThreads(searchValue)   \n    ]);\n    console.log(searchValue)\n    \n\n    this.setState({ threads, loading: false, previousSearch:this.state.previousSearch.concat(searchValue)});\n  }\n  increaseReads= async ()=>{\n    console.log(this.state.reads);\n    let reads=this.state.reads+1;\n    console.log(reads);\n    this.setState({reads});\n  }\n  render(){\n    return (\n      <div>\n        <SearchForm onSearch={this.handleSearch}/>\n        <div> Previous searches:<History previousSearches={this.state.previousSearch} applyPreviousSearch={this.handleSearch}/> </div>\n        <div>Number of threads read: </div>\n        <div id=\"reads\">0</div>\n        {this.state.loading && <Loading />}\n        <div>\n        <ThreadList threads={this.state.threads} increaseReads={this.increaseReads} reads={this.state.reads}/>\n        </div>\n      </div>\n      );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}